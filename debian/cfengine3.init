#!/bin/sh
#
# Example init.d script with LSB support.
#
# Please read this init.d carefully and modify the sections to
# adjust it to the program you want to run.
#
# Copyright (c) 2007 Javier Fernandez-Sanguino <jfs@debian.org>
#
# This is free software; you may redistribute it and/or modify
# it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2,
# or (at your option) any later version.
#
# This is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License with
# the Debian operating system, in /usr/share/common-licenses/GPL;  if
# not, write to the Free Software Foundation, Inc., 59 Temple Place,
# Suite 330, Boston, MA 02111-1307 USA
#
### BEGIN INIT INFO
# Provides:          hello
# Required-Start:    $network $local_fs
# Required-Stop:
# Should-Start:      $named
# Should-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: <Enter a short description of the sortware>
# Description:       <Enter a long description of the software>
#                    <...>
#                    <...>
### END INIT INFO

PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin


NAME=cfengine3
LOGDIR=/var/log/cfengine3
DESC=cfengine3
CFEXECD_DAEMON=/usr/sbin/cf-execd
CFSERVD_DAEMON=/usr/sbin/cf-serverd
CFMONITORD_DAEMON=/usr/sbin/cf-monitord
PIDROOT=/var/lib/cfengine3

# Return-status
RETVAL=0

test -x $CFEXECD_DAEMON || exit 0
test -x $CFSERVD_DAEMON || exit 0
test -x $CFMONITORD_DAEMON || exit 0

. /lib/lsb/init-functions

# Default options, these can be overriden by the information
# at /etc/default/$NAME
DIETIME=10              # Time to wait for the server to die, in seconds
                        # If this value is set too low you might not
                        # let some servers to die gracefully and
                        # 'restart' will not work


#FIXME
#LOGFILE=$LOGDIR/$NAME.log  # Server logfile

# Include defaults if available
RUN_CFMONITORD=1
RUN_CFEXECD=1
RUN_CFSERVD=1
if [ -f /etc/default/$NAME ] ; then
    . /etc/default/$NAME
fi

set -e

running_pid() {
# Check if a given process pid's cmdline matches a given name
    pid=$1
    name=$2
    [ -z "$pid" ] && return 1
    [ ! -d /proc/$pid ] &&  return 1
    cmd=`cat /proc/$pid/cmdline | tr "\000" "\n"|head -n 1 |cut -d : -f 1`
    # Is this the expected server
    [ "$cmd" != "$name" ] &&  return 1
    return 0
}

running() {
    DAEMON=$1
    DAEMON_NAME=`basename $DAEMON`
    PIDFILE="$PIDROOT/$DAEMON_NAME.pid"

# Check if the process is running looking at /proc
# (works for all users)

    # No pidfile, probably no daemon present
    [ ! -f "$PIDFILE" ] && return 1
    pid=`cat $PIDFILE`
    running_pid $pid $DAEMON || return 1
    return 0
}

start_server() {
    DAEMON=$1
    DAEMON_NAME=`basename $DAEMON`
    PIDFILE="$PIDROOT/$DAEMON_NAME.pid"
    
    start_daemon -p $PIDFILE $DAEMON $DAEMON_OPTS
    errcode=$?
    test $errcode = "0" || RETVAL=1

    return $errcode
}

stop_server() {
    DAEMON=$1
    DAEMON_NAME=`basename $DAEMON`
    PIDFILE="$PIDROOT/$DAEMON_NAME.pid"

    killproc -p $PIDFILE $DAEMON
    errcode=$?
    test $errcode = "0" || RETVAL=1

    return $errcode
}

reload_server() {
    DAEMON=$1
    DAEMON_NAME=`basename $DAEMON`
    PIDFILE="$PIDROOT/$DAEMON_NAME.pid"

    [ ! -f "$PIDFILE" ] && return 1
    pid=pidofproc $PIDFILE # This is the daemon's pid
    # Send a SIGHUP
    kill -1 $pid
    errcode=$?
    test $errcode = "0" || RETVAL=1

    return $errcode
}

force_stop() {
    DAEMON=$1
    DAEMON_NAME=`basename $DAEMON`
    PIDFILE="$PIDROOT/$DAEMON_NAME.pid"

# Force the process to die killing it manually
    [ ! -e "$PIDFILE" ] && return
    if running $DAEMON; then
        kill -15 $pid
        # Is it really dead?
        sleep "$DIETIME"s
        if running $DAEMON; then
            kill -9 $pid
            sleep "$DIETIME"s
            if running $DAEMON; then
                echo "Cannot kill $DAEMON_NAME (pid=$pid)!"
                exit 1
            fi
        fi
    fi
    rm -f $PIDFILE
}


case "$1" in
  start)
        log_daemon_msg "Starting $DESC " "$NAME"
        case "$RUN_CFMONITORD $RUN_CFEXECD $RUN_CFSERVD" in
            *1*) ;;
            *) exit 0;;
        esac
   
		if [ ! -f /var/lib/cfengine3/inputs/promises.cf ]; then
			log_daemon_msg "\nSkipping cfengine3, /var/lib/cfengine3/inputs/promises.cf missing"
			log_end_msg 0
			exit 0
		fi

        RETVAL=0
        if [ "$RUN_CFMONITORD" = "1" ]; then
            start_server $CFMONITORD_DAEMON 
            running $CFMONITORD_DAEMON || RETVAL=1
        fi
        if [ "$RUN_CFEXECD" = "1" ]; then
            start_server $CFEXECD_DAEMON
            running $CFEXECD_DAEMON || RETVAL=1
        fi
        if [ "$RUN_CFSERVD" = "1" ]; then
            start_server $CFSERVD_DAEMON
            running $CFSERVD_DAEMON || RETVAL=1
        fi
        log_end_msg $RETVAL
        ;;
  stop)
        RETVAL=0
        log_daemon_msg "Stopping $DESC" "$NAME"
        if [ "$RUN_CFMONITORD" = "1" ]; then
            if running $CFMONITORD_DAEMON; then
                stop_server $CFMONITORD_DAEMON || RETVAL=1
            fi
        fi
        if [ "$RUN_CFEXECD" = "1" ]; then
            if running $CFEXECD_DAEMON; then
                stop_server $CFEXECD_DAEMON || RETVAL=1
            fi
        fi
        if [ "$RUN_CFSERVD" = "1" ]; then
            if running $CFSERVD_DAEMON; then
                stop_server $CFSERVD_DAEMON || RETVAL=1
            fi
        fi
        log_end_msg $RETVAL
        ;;
#  force-stop)
#        # First try to stop gracefully the program
#        $0 stop
#        if running; then
#            # If it's still running try to kill it more forcefully
#            log_daemon_msg "Stopping (force) $DESC" "$NAME"
#            errcode=0
#            force_stop || errcode=$?
#            log_end_msg $errcode
#        fi
#        ;;
#  restart|force-reload)
#        log_daemon_msg "Restarting $DESC" "$NAME"
#        errcode=0
#        stop_server || errcode=$?
#        # Wait some sensible amount, some server need this
#        [ -n "$DIETIME" ] && sleep $DIETIME
#        start_server || errcode=$?
#        [ -n "$STARTTIME" ] && sleep $STARTTIME
#        running || errcode=$?
#        log_end_msg $errcode
#        ;;
#  status)
#
#        log_daemon_msg "Checking status of $DESC" "$NAME"
#        if running ;  then
#            log_progress_msg "running"
#            log_end_msg 0
#        else
#            log_progress_msg "apparently not running"
#            log_end_msg 1
#            exit 1
#        fi
#        ;;
  # Use this if the daemon cannot reload
  reload)
        log_warning_msg "Reloading $NAME daemon: not implemented, as the daemon"
        log_warning_msg "cannot re-read the config file (use restart)."
        ;;
  # And this if it cann
  #reload)
          #
          # If the daemon can reload its config files on the fly
          # for example by sending it SIGHUP, do it here.
          #
          # If the daemon responds to changes in its config file
          # directly anyway, make this a do-nothing entry.
          #
          # log_daemon_msg "Reloading $DESC configuration files" "$NAME"
          # if running ; then
          #    reload_server
          #    if ! running ;  then
          # Process died after we tried to reload
          #       log_progress_msg "died on reload"
          #       log_end_msg 1
          #       exit 1
          #    fi
          # else
          #    log_progress_msg "server is not running"
          #    log_end_msg 1
          #    exit 1
          # fi
                                                                                    #;;

  *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|force-stop|restart|force-reload|status}" >&2
        exit 1
        ;;
esac

exit 0
